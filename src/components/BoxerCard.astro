---
const { id, name } = Astro.props;
---

<a
  class="boxer-card inline-block transition-all w-10 sm:w-14 md:w-16 lg:w-24 xl:w-26 group relative rounded-lg overflow-hidden duration-300 hover:-translate-y-3 hover:scale-105 hover:z-20 hover:shadow-[0px_4px_12px_var(--color-theme-turquoise)]"
  href={`/luchador/${id}`}
  data-id={id}
>
  <div class="relative overflow-hidden">
    <img
      class="aspect-[900/1200] h-full w-full object-cover transition-transform duration-500 group-hover:scale-110"
      src={`/images/fighters/cards/${id}.png`}
      alt={`Tarjeta del boxeador ${name}`}
    />

    <div
      class="absolute inset-0 bg-gradient-to-tr from-transparent via-white/20 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-500 ease-in-out"
    >
    </div>

    <div
      class="absolute inset-0 border-0 group-hover:border-1 border-pink-500 rounded-lg transition-all duration-300 opacity-0 group-hover:opacity-90"
    >
    </div>
  </div>

  <div
    class="absolute inset-0 flex flex-col items-center justify-end bg-gradient-to-t from-pink-950/50 via-pink-950/40 to-transparent p-2 opacity-0 group-hover:opacity-100 transition-all duration-300 translate-y-2 group-hover:translate-y-0"
  >
    <h3
      class="bg-gradient-to-t from-pink-700 via-pink-500 to-pink-200 text-sm font-bold bg-clip-text text-transparent tracking-wide drop-shadow-[0_1px_2px_rgba(0,0,0,0.8)]"
    >
      {name}
    </h3>
  </div>
</a>

<style>
  @media (prefers-reduced-motion) {
    .boxer-card,
    .boxer-card:hover,
    .boxer-card img,
    .boxer-card div {
      transition: opacity 0.3s ease !important;
      transform: none !important;
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const boxerCards = document.querySelectorAll(".boxer-card");
    let timeoutId = null;
    const eventListeners = [];

    boxerCards.forEach((singleBoxerCard) => {
      let isClicked = false; //para evitar que se dispare el evento mouseleave si se hizo click

      const mouseEnterHandler = () => {
        if (timeoutId) {
          clearTimeout(timeoutId);
          timeoutId = null;
        }
        const id = singleBoxerCard.getAttribute("data-id");
        if (id) {
          document.dispatchEvent(
            new CustomEvent("boxer-card-hovered", { detail: { id } })
          );
        }
      };

      const mouseLeaveHandler = () => {
        if (isClicked) return;
        timeoutId = setTimeout(() => {
          document.dispatchEvent(new CustomEvent("boxer-card-exit"));
        }, 500);
      };

      const clickHandler = () => {
        isClicked = true;
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
      };

      singleBoxerCard.addEventListener("mouseenter", mouseEnterHandler);
      singleBoxerCard.addEventListener("mouseleave", mouseLeaveHandler);
      singleBoxerCard.addEventListener("click", clickHandler);

      eventListeners.push({
        element: singleBoxerCard,
        events: [
          { type: "mouseenter", handler: mouseEnterHandler },
          { type: "mouseleave", handler: mouseLeaveHandler },
          { type: "click", handler: clickHandler },
        ],
      });
    });

    singleBoxerCard.addEventListener("focus", () => {
      const id = singleBoxerCard.getAttribute("data-id");
      if (id) {
        const event = new CustomEvent("boxer-card-hovered", {
          detail: { id },
        });
        document.dispatchEvent(event);
      }
    });

    singleBoxerCard.addEventListener("blur", () => {
      timeoutId = setTimeout(() => {
        const event = new CustomEvent("boxer-card-exit");
        document.dispatchEvent(event);
      }, 500);
    });

    //limpiar los eventos para evitar memory leak
    const cleanupEventListeners = () => {
      eventListeners.forEach(({ element, events }) => {
        events.forEach(({ type, handler }) => {
          element.removeEventListener(type, handler);
        });
      });
    };

    window.addEventListener("beforeunload", cleanupEventListeners);
  });
</script>
